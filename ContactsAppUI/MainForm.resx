<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACebIwAnWyLAJ9sjQCfbI0An2yNAJ9sjQCfbI0An2yNAJ9sjQCfbI0An2yNAJ9s
        jQCfbI0An2yNAJ9sjQCfbI0An2yNAJ9sjQCfbI0An2yNAJ9sjQCgbY0AnGaRAKqAgAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAnm2OAJ1rjACSYncBnWaIFJ1lhhydZYYcnWWGHJ1lhhydZYYcnWWGHJ1l
        hhydZYYcnWWGHJ1lhhydZYYcnWWGHJ1lhhydZYYcnWWGHJ1lhhydZYYcnWaHGaBqigadZ40AnGaRAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACdbY4AmGyNAZ9tjlahdJTMo3mZ5KN5meOjeZnjo3mZ46N5
        meOjeZnjo3mZ46N5meOjeZnjo3mZ46N5meOjeZnjo3mZ46N5meOjeZnjo3mZ46N5meSid5fcoG6PfaBq
        igagbY0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9sjQCdZogUoXOUzbOxzP+7zeX/u8zk/7vM
        5P+7zOT/u8zk/7vM5P+7zOT/u8zk/7vM5P+7zOT/u8zk/7vM5P+7zOT/u8zk/7vM5P+7zOT/u83l/7a9
        1/+id5fcnWWHGZ9sjQCAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn2yNAJ5oihyhcpPksrDK/7vN
        5f+7zeX/u83l/7vN5f+6zOT/uszk/7rM5P+6zOT/uszk/7rM5P+6zOT/uszk/7rM5P+6zOT/uszk/7rM
        5P+7zeX/t8Ha/6J3l+WdZocgn2uNAKRojwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACfbI0An2uMHJ9u
        j+Oie53/o36f/6N+n/+jfZ7/o3qa/6iEov+phqT/qYak/6mGpP+phqT/qYak/6mGpP+phqT/qYak/6mG
        pP+phqT/qYak/6mGpP+phaL/pXmY+aBujoKbaYoGnmyNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9s
        jQCeaYkcoHKU46WWwP+llsD/pZbA/6WUvv+mfZ3/0dPi/9fh7v/X4O3/1+Dt/9fg7f/X4O3/1+Dt/9fg
        7f/X4O3/1+Dt/9fg7f/X4O3/1+Dt/9fh7v/Ozt//pXmY3ZtkhxmfbI0AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAn2yNAJ5oiRygc5XjppjC/6KApf+igKX/pZfC/6eAoP/X4e7/3/H8/97w+//e8Pv/3vD7/97w
        +//e8Pv/3vD7/97w+//e8Pv/3vD7/97w+//e8Pv/3/H8/9fh7v+nfJrkm2OGHJ9sjQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACfbI0AnmiJHKBzleOmmsX/pp3I/6adyP+mmsX/p4Cg/9fg7v/e8Pv/3u/6/97v
        +v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e8Pv/1+Dt/6d8muOaYoUan2yNAKJp
        jwCAgIAAAAAAAAAAAAAAAAAAAAAAAJ9sjQCeaIkcoHOV46aZw/+kjLP/pIyz/6WYw/+ngKD/1+Du/97w
        +//e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97w+//X4O7/pnua65xm
        ij+ZYo4Cn2mPAKFqjwAAAAAAAAAAAAAAAAAAAAAAn2yNAJ5oiRygc5XjppnD/6SLs/+ki7P/pZjD/6eA
        oP/X4O7/3vD7/97v+v/e7/r/3u/6/97v+v/e8Pv/3vD7/97w+//e8Pv/3vD7/97v+v/e7/r/3vD7/9fh
        7v+ofJn+p3SL4aBtjXmca44InmyOAAAAAAAAAAAAAAAAAAAAAACfbI0AnmiJHKBzleOmmsX/pp3I/6ad
        yP+mmsX/p4Cg/9fg7v/e8Pv/3u/6/97v+v/f8Pv/3Ov3/9ji7//X4O3/1+Dt/9fg7f/Y4/D/3e75/97v
        +v/e8Pv/1+Du/6+EmP/Xp4f/qHWM4ZpnjhqfbI0AAAAAAAAAAAAAAAAAAAAAAJ9sjQCeaIkcoHOV46aY
        wv+igKX/ooCl/6WXwf+ngKD/1+Du/97w+//e7/r/3u/6/9DS4v+3nrf/r4yo/62Jpv+tiaX/rIik/7ee
        t//a5/T/3vD6/97w+//W4O7/sIWY/+S1hv+reYzkmWaOHJ9sjQAAAAAAAAAAAAAAAAAAAAAAn2yNAJ5o
        iRygc5XjpprF/6adyP+mncj/pprF/6eAoP/X4O7/3vD7/9/w+//Q0eH/r42o/8Cwxv/Q0eH/0NLi/9Ta
        6P/V3Or/0tfm/9zq9v/e7/r/3vD7/9bg7v+whZj/5LWG/6t4jOOZZo4cn2yNAAAAAAAAAAAAAAAAAAAA
        AACfbI0AnmiJHKBzleOmmcP/pIyz/6SMs/+lmMP/p4Cg/9fg7v/f8Pv/3Ov3/7eet//Ascb/0dXk/7Wa
        s/+tiqb/tZqz/7ihuf+uiqb/wLDG/9zs9//f8Pv/1+Du/62CmP/Xp4f/qneM45pmjRyfbI0AAAAAAAAA
        AAAAAAAAAAAAAJ9sjQCeaIkcoHOV46aZw/+ki7P/pIuz/6WYw/+ngKD/1+Du/9/x/P/Y4u//r4yo/9DR
        4f+1mrP/varA/9PZ6P+9qsH/pnuZ/8W7z/+tiqb/1+Hv/9/x/P/X4e7/p32Y/6h7if+hb43jnmuNHJ9s
        jQAAAAAAAAAAAAAAAAAAAAAAn2yNAJ5oiRygc5XjpprF/6adyP+mncj/pprF/6eAoP/X4O7/3/H8/9fg
        7f+tiqb/0NHh/62Kpv/V3Or/4PP9/9Xc6v+tiKT/0NLi/62Jpf/X4O3/3/H8/9fg7v+nhJb/qKd7/6B1
        iuOeZ44cn2yNAAAAAAAAAAAAAAAAAAAAAACfbI0AnmiJHKBzleOmmML/ooCl/6KApf+ll8H/p4Cg/9fg
        7v/f8fz/1+Dt/62Jpv/P0OH/rYml/9fg7v/f8fz/1+Du/62Kpv/P0OH/rYmm/9fg7f/f8fz/1+Du/6iF
        lv+rtXf/oXiJ455mjxyfbI0AAAAAAAAAAAAAAAAAAAAAAJ9sjQCeaIkcoHOV46aaxf+mncj/pp3I/6aa
        xf+ngKD/1+Du/9/x/P/X4O3/rYqm/9DR4f+tiqb/1dzq/+Dy/f/V3er/rYqm/9DR4f+tiqb/1+Dt/9/x
        /P/X4O7/qIWW/6u1d/+heInjnmaPHJ9sjQAAAAAAAAAAAAAAAAAAAAAAn2yNAJ5oiRygc5XjppnD/6SM
        s/+kjLP/pZjD/6eAoP/X4O7/3/H8/9ji7/+vjKj/0NLi/7Was/+9qsH/09no/72qwf+1mrP/0NLh/6+N
        qP/Y4u//3/H8/9fg7v+ngpf/qad7/6F3iuOeZo8cn2yNAAAAAAAAAAAAAAAAAAAAAACfbI0AnmiJHKBz
        leOmmcP/pIuz/6SLs/+lmMP/p4Cg/9fg7v/f8Pv/3Ov3/7eet//Ascb/0dXk/7Was/+tiqb/tZqz/9HV
        5P/Ascb/t5+3/9zr9//f8Pv/1+Hu/6Z7m/+fdJL/n26N459rjRyfbI0AAAAAAAAAAAAAAAAAAAAAAJ9s
        jQCeaIkcoHOV46aaxf+mncj/pp3I/6aaxf+ngKD/1+Du/97w+//f8Pv/0NHh/6+MqP/Ascb/0NLh/9DS
        4v/Q0eH/wLDG/6+NqP/Q0uL/3/D7/97w+//X4e3/pXyj/5tyyv+ebZbjn2uIHJ9sjQAAAAAAAAAAAAAA
        AAAAAAAAn2yNAJ5oiRygc5XjppjC/6KApf+igKX/pZfB/6aAn//X4O7/3vD7/97v+v/e7/r/0NHh/7ee
        t/+vjKj/rYmm/6+MqP+3nrf/0NHh/97v+v/e7/r/3vD7/9fh7f+lfKT/mnTX/55umuOfa4Ycn2yNAAAA
        AAAAAAAAAAAAAAAAAACfbI0AnmiJHKBzleOmmsX/pp3I/6adyP+mm8b/rI+u/9nk8P/e8Pv/3u/6/97v
        +v/f8Pv/3Ov3/9ji7//X4O3/2OLv/9zr9//f8Pv/3u/6/97v+v/e8Pv/1+Ht/6V8pP+adNf/nm6a459r
        hhyfbI0AAAAAAAAAAAAAAAAAAAAAAJ9sjQCeaIkcoHOV46aZw/+kjLP/pIuz/6adyP++vdn/3u75/97v
        +v/e7/r/3u/6/97v+v/e7/r/3vD7/97w+//e8Pv/3u/6/97v+v/e7/r/3u/6/97w+//X4e3/pXyk/5p0
        1/+ebprjn2uGHJ9sjQAAAAAAAAAAAAAAAAAAAAAAn2yNAJ5oiRygc5XjppnD/6SLs/+ki7P/pZnE/62P
        rv/Z5PD/3vD7/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3vD7/9fh
        7f+lfKP/mnPO/55tmOSfa4ccn2yNAAAAAAAAAAAAAAAAAAAAAACfbI0AnmiJHKBzleOmm8X/pp3I/6ad
        yP+mmsX/pn+f/9fg7f/e8Pv/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v+v/e7/r/3u/6/97v
        +v/e8Pv/1+Hu/6Z7mvyebJXnn2yPpqBsiw6fbI0AAAAAAAAAAAAAAAAAAAAAAJ9sjQCeaIkcoHOV5KaY
        wv+igKX/ooCl/6WYw/+tj67/2eXx/9/x+//e8Pv/3vD7/97w+//e8Pv/3vD7/97w+//e8Pv/3vD7/97w
        +//e8Pv/3vD7/9/x/P/X4e7/p3ya551nhjWhbIwNrm2LAKNsiwAAAAAAAAAAAAAAAAAAAAAAn2uNAJ9o
        ihSgcJHMpI21/6WWwP+llsD/pZnE/7y41P/X4O3/1+Dt/9fg7f/X4O3/1+Dt/9fg7f/X4O3/1+Dt/9fg
        7f/X4O3/1+Dt/9fg7f/X4O3/1+Hu/87O3v+leZjcm2SGF59sjQCibIsAoWyMAAAAAAAAAAAAAAAAAAAA
        AACfa40AnWaKAZ9sjVOgcJHMoHOV5KBzleOgcpXjpHiY46d8m+OnfJrjp3ya46d8muOnfJrjp3ya46d8
        muOnfJrjp3ya46d8muOnfJrjp3ya46d8muOnfJrkpXmY3aBuj32eaosGn22NAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAJ9sjQCfa4wAnWaKAZ9oihSeaIkcnmiJHJ9piRydZoccm2OGHJtjhhybY4Ycm2OGHJtj
        hhybY4Ycm2OGHJtjhhybY4Ycm2OGHJtjhhybY4Ycm2OGHJtjhhybZIYZnmuKBpxnjgCcZpIAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9sjQCfa40An2uNAJ9sjQCfbI0An2yNAJ9sjQCfbI0An2yNAJ9s
        jQCfbI0An2yNAJ9sjQCfbI0An2yNAJ9sjQCfbI0An2yNAJ9sjQCfbI0An2yNAJ9sjQCfbY0AnGeRAKqA
        gAAAAAAAAAAAAAAAAAAAAAAA4AAAH8AAAB/AAAAfwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAADwAAAA8AA
        AAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AA
        AAPAAAADwAAAA8AAAAPAAAAPwAAAD+AAAA8=
</value>
  </data>
</root>